{"ast":null,"code":"var props = [\"bottom\", \"height\", \"left\", \"right\", \"top\", \"width\"];\nvar rectChanged = function rectChanged(a, b) {\n  if (a === void 0) {\n    a = {};\n  }\n  if (b === void 0) {\n    b = {};\n  }\n  return props.some(function (prop) {\n    return a[prop] !== b[prop];\n  });\n};\nvar observedNodes = /*#__PURE__*/new Map();\nvar rafId;\nvar run = function run() {\n  var changedStates = [];\n  observedNodes.forEach(function (state, node) {\n    var newRect = node.getBoundingClientRect();\n    if (rectChanged(newRect, state.rect)) {\n      state.rect = newRect;\n      changedStates.push(state);\n    }\n  });\n  changedStates.forEach(function (state) {\n    state.callbacks.forEach(function (cb) {\n      return cb(state.rect);\n    });\n  });\n  rafId = window.requestAnimationFrame(run);\n};\nfunction observeRect(node, cb) {\n  return {\n    observe: function observe() {\n      var wasEmpty = observedNodes.size === 0;\n      if (observedNodes.has(node)) {\n        observedNodes.get(node).callbacks.push(cb);\n      } else {\n        observedNodes.set(node, {\n          rect: undefined,\n          hasRectChanged: false,\n          callbacks: [cb]\n        });\n      }\n      if (wasEmpty) run();\n    },\n    unobserve: function unobserve() {\n      var state = observedNodes.get(node);\n      if (state) {\n        // Remove the callback\n        var index = state.callbacks.indexOf(cb);\n        if (index >= 0) state.callbacks.splice(index, 1); // Remove the node reference\n\n        if (!state.callbacks.length) observedNodes[\"delete\"](node); // Stop the loop\n\n        if (!observedNodes.size) cancelAnimationFrame(rafId);\n      }\n    }\n  };\n}\nexport default observeRect;","map":{"version":3,"names":["props","rectChanged","a","b","some","prop","observedNodes","Map","rafId","run","changedStates","forEach","state","node","newRect","getBoundingClientRect","rect","push","callbacks","cb","window","requestAnimationFrame","observeRect","observe","wasEmpty","size","has","get","set","undefined","hasRectChanged","unobserve","index","indexOf","splice","length","cancelAnimationFrame"],"sources":["/Users/Akebu/Documents/PERSONAL/Hackathon /places-map/node_modules/@reach/observe-rect/src/index.ts"],"sourcesContent":["let props: (keyof DOMRect)[] = [\n\t\"bottom\",\n\t\"height\",\n\t\"left\",\n\t\"right\",\n\t\"top\",\n\t\"width\",\n];\n\nlet rectChanged = (a: DOMRect = {} as DOMRect, b: DOMRect = {} as DOMRect) =>\n\tprops.some((prop) => a[prop] !== b[prop]);\n\nlet observedNodes = new Map<Element, RectProps>();\nlet rafId: number;\n\nlet run = () => {\n\tconst changedStates: RectProps[] = [];\n\tobservedNodes.forEach((state, node) => {\n\t\tlet newRect = node.getBoundingClientRect();\n\t\tif (rectChanged(newRect, state.rect)) {\n\t\t\tstate.rect = newRect;\n\t\t\tchangedStates.push(state);\n\t\t}\n\t});\n\n\tchangedStates.forEach((state) => {\n\t\tstate.callbacks.forEach((cb) => cb(state.rect));\n\t});\n\n\trafId = window.requestAnimationFrame(run);\n};\n\nexport default function observeRect(\n\tnode: Element,\n\tcb: (rect: DOMRect) => void\n) {\n\treturn {\n\t\tobserve() {\n\t\t\tlet wasEmpty = observedNodes.size === 0;\n\t\t\tif (observedNodes.has(node)) {\n\t\t\t\tobservedNodes.get(node)!.callbacks.push(cb);\n\t\t\t} else {\n\t\t\t\tobservedNodes.set(node, {\n\t\t\t\t\trect: undefined,\n\t\t\t\t\thasRectChanged: false,\n\t\t\t\t\tcallbacks: [cb],\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (wasEmpty) run();\n\t\t},\n\n\t\tunobserve() {\n\t\t\tlet state = observedNodes.get(node);\n\t\t\tif (state) {\n\t\t\t\t// Remove the callback\n\t\t\t\tconst index = state.callbacks.indexOf(cb);\n\t\t\t\tif (index >= 0) state.callbacks.splice(index, 1);\n\n\t\t\t\t// Remove the node reference\n\t\t\t\tif (!state.callbacks.length) observedNodes.delete(node);\n\n\t\t\t\t// Stop the loop\n\t\t\t\tif (!observedNodes.size) cancelAnimationFrame(rafId);\n\t\t\t}\n\t\t},\n\t};\n}\n\nexport type PartialRect = Partial<DOMRect>;\n\nexport type RectProps = {\n\trect: DOMRect | undefined;\n\thasRectChanged: boolean;\n\tcallbacks: Function[];\n};\n"],"mappings":"AAAA,IAAIA,KAAK,GAAsB,CAC9B,QAD8B,EAE9B,QAF8B,EAG9B,MAH8B,EAI9B,OAJ8B,EAK9B,KAL8B,EAM9B,OAN8B,CAA/B;AASA,IAAIC,WAAW,GAAG,SAAdA,WAAcA,CAACC,CAAD,EAA6BC,CAA7B;EAAA,IAACD,CAAD;IAACA,CAAD,GAAc,EAAd;EAAA;EAAA,IAA6BC,CAA7B;IAA6BA,CAA7B,GAA0C,EAA1C;EAAA;EAAA,OACjBH,KAAK,CAACI,IAAN,CAAW,UAACC,IAAD;IAAA,OAAUH,CAAC,CAACG,IAAD,CAAD,KAAYF,CAAC,CAACE,IAAD,CAAvB;EAAA,CAAX,CADiB;AAAA,CAAlB;AAGA,IAAIC,aAAa,gBAAG,IAAIC,GAAJ,EAApB;AACA,IAAIC,KAAJ;AAEA,IAAIC,GAAG,GAAG,SAANA,GAAMA,CAAA;EACT,IAAMC,aAAa,GAAgB,EAAnC;EACAJ,aAAa,CAACK,OAAd,CAAsB,UAACC,KAAD,EAAQC,IAAR;IACrB,IAAIC,OAAO,GAAGD,IAAI,CAACE,qBAAL,EAAd;IACA,IAAId,WAAW,CAACa,OAAD,EAAUF,KAAK,CAACI,IAAhB,CAAf,EAAsC;MACrCJ,KAAK,CAACI,IAAN,GAAaF,OAAb;MACAJ,aAAa,CAACO,IAAd,CAAmBL,KAAnB;IACA;EACD,CAND;EAQAF,aAAa,CAACC,OAAd,CAAsB,UAACC,KAAD;IACrBA,KAAK,CAACM,SAAN,CAAgBP,OAAhB,CAAwB,UAACQ,EAAD;MAAA,OAAQA,EAAE,CAACP,KAAK,CAACI,IAAP,CAAV;IAAA,CAAxB;EACA,CAFD;EAIAR,KAAK,GAAGY,MAAM,CAACC,qBAAP,CAA6BZ,GAA7B,CAAR;AACA,CAfD;SAiBwBa,YACvBT,IAAA,EACAM,EAAA;EAEA,OAAO;IACNI,OADM,WAAAA,QAAA;MAEL,IAAIC,QAAQ,GAAGlB,aAAa,CAACmB,IAAd,KAAuB,CAAtC;MACA,IAAInB,aAAa,CAACoB,GAAd,CAAkBb,IAAlB,CAAJ,EAA6B;QAC5BP,aAAa,CAACqB,GAAd,CAAkBd,IAAlB,EAAyBK,SAAzB,CAAmCD,IAAnC,CAAwCE,EAAxC;MACA,CAFD,MAEO;QACNb,aAAa,CAACsB,GAAd,CAAkBf,IAAlB,EAAwB;UACvBG,IAAI,EAAEa,SADiB;UAEvBC,cAAc,EAAE,KAFO;UAGvBZ,SAAS,EAAE,CAACC,EAAD;QAHY,CAAxB;MAKA;MACD,IAAIK,QAAJ,EAAcf,GAAG;IACjB,CAbK;IAeNsB,SAfM,WAAAA,UAAA;MAgBL,IAAInB,KAAK,GAAGN,aAAa,CAACqB,GAAd,CAAkBd,IAAlB,CAAZ;MACA,IAAID,KAAJ,EAAW;QACV;QACA,IAAMoB,KAAK,GAAGpB,KAAK,CAACM,SAAN,CAAgBe,OAAhB,CAAwBd,EAAxB,CAAd;QACA,IAAIa,KAAK,IAAI,CAAb,EAAgBpB,KAAK,CAACM,SAAN,CAAgBgB,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B,EAHN;;QAMV,IAAI,CAACpB,KAAK,CAACM,SAAN,CAAgBiB,MAArB,EAA6B7B,aAAa,UAAb,CAAqBO,IAArB,EANnB;;QASV,IAAI,CAACP,aAAa,CAACmB,IAAnB,EAAyBW,oBAAoB,CAAC5B,KAAD,CAApB;MACzB;IACD;EA5BK,CAAP;AA8BA"},"metadata":{},"sourceType":"module","externalDependencies":[]}